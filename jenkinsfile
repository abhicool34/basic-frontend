// Jenkinsfile
pipeline {
    // Agent 'any' means Jenkins can use any available agent to run this pipeline.
    // For a real setup, you'd configure a specific Kubernetes pod agent.
    agent any

    // Environment variables used throughout the pipeline
    environment {
        REGISTRY = 'abhicool34' // Change this to your Docker Hub username
        IMAGE_NAME = 'basic-frontend'
        // REGISTRY_CREDENTIALS_ID is the ID of the secret text credential you create in Jenkins for your Docker Hub password.
        REGISTRY_CREDENTIALS_ID = 'dockerhubcreds'
    }

    stages {
        // STAGE 1: Checkout Code
        // Clones the source code from your Git repository.
        stage('Checkout') {
            steps {
                git 'https://github.com/abhicool34/basic-frontend.git' // Change to your repo URL
            }
        }

        // STAGE 2: Build Docker Image
        // Builds the Docker image using the Dockerfile in your repo.
        stage('Build Image') {
            steps {
                script {
                    // Uses the Docker plugin in Jenkins. 'sh' runs a shell command.
                    // The image is tagged with the build number to ensure uniqueness.
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }

        // STAGE 3: Push Docker Image
        // Pushes the built image to your container registry (Docker Hub).
        stage('Push Image') {
            steps {
                // 'withCredentials' securely injects your Docker Hub credentials.
                // You must configure these credentials in Jenkins beforehand.
                withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }

        // STAGE 4: Deploy to Kubernetes
        // Updates the Kubernetes deployment to use the new image.
        stage('Deploy') {
            steps {
                script {
                    // This uses kubectl to update the image of the deployment we created earlier.
                    // Jenkins needs credentials to access your Kubernetes cluster for this to work.
                    sh "kubectl set image deployment/frontend-app-deployment frontend-container=${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
    }

    // Post-build actions: Clean up the workspace and the pushed Docker image.
    post {
        always {
            cleanWs()
        }
    }
}
