// Jenkinsfile
pipeline {
    // === MODIFIED SECTION: Define a Kubernetes Pod Agent with Docker-in-Docker ===
    agent {
        kubernetes {
            // This defines the Pod that will be used as the build agent.
            // It has two containers: 'jnlp' for the Jenkins agent and 'docker' for the Docker daemon.
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    # The workspace volume is shared between the two containers
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent/workspace
  - name: docker
    image: docker:20.10.17-dind
    command: ["dockerd", "--host=tcp://127.0.0.1:2375", "--storage-driver=overlay2"]
    securityContext:
      privileged: true
    # The workspace volume is shared between the two containers
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent/workspace
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }

    environment {
        // IMPORTANT: Make sure your Docker Hub username is correct
        REGISTRY = 'abhicool34' 
        IMAGE_NAME = 'basic-frontend'
        // This is the ID of the "Username with password" credential you created in Jenkins for Docker Hub
        REGISTRY_CREDENTIALS_ID = 'dockerhubcreds'
    }

    stages {
        stage('Checkout') {
            steps {
                // The git checkout step remains the same
                git 'https://github.com/abhicool34/basic-frontend.git' 
            }
        }

        stage('Build Image') {
            steps {
                // This 'container' block tells Jenkins to run the commands
                // inside the 'docker' sidecar container.
                container('docker') {
                    script {
                        // The image is tagged with the build number for uniqueness
                        sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('Push Image') {
            steps {
                // This 'container' block also runs inside the 'docker' sidecar
                container('docker') {
                    // This securely injects your Docker Hub credentials
                    withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                // The kubectl command runs in the default 'jnlp' container,
                // which needs to have kubectl installed or configured.
                // For this to work, you must also configure Jenkins with credentials
                // to access your Kubernetes cluster.
                script {
                    sh "kubectl set image deployment/frontend-app-deployment frontend-container=${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
    }

    // This section will now work once the Workspace Cleanup plugin is installed.
    post {
        always {
            cleanWs()
        }
    }
}
